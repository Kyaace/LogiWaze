{
  "name": "demo-map",
  "version": "1.0.0",
  "description": "",
  "repository": "",
  "homepage": "",
  "main": "src/index.js",
  "directories": {},
  "scripts": {
  "build": "roads=\"$(mktemp).sqlite\"; LD_LIBRARY_PATH=./ogr2ogr_libraries ./ogr2ogr \"$roads\" ./Mapped/Unified.geojson -f SQLite -dsco SPATIALITE=YES -nln roads && LD_LIBRARY_PATH=./ogr2ogr_libraries ./ogr2ogr \"$roads\" ./hexes.geojson -f SQLite -dsco SPATIALITE=YES -nln hexes -append && echo \"alter table roads add column region text; create table temp as select intersection(a.geometry, b.geometry) [geometry], a.rowid [rowid], b.[region] region from [roads] a join [hexes] b on st_intersects(a.geometry, b.geometry) where not intersection(a.geometry, b.geometry) is null; delete from roads; insert into [roads]([geometry], [region]) select [geometry], [region] from temp where not [geometry] is null and st_npoints(geometry)>0; update [roads] set [region]=(select region from [hexes] b where st_contains(b.geometry, roads.geometry) limit 1); update [roads] set [region]=(select region from [hexes] b where st_intersects(b.geometry, roads.geometry) limit 1) where region is null; update [roads] set geometry = ATM_Transform(ATM_Transform(geometry, ATM_CreateScale(128.0 / 20037508.3427892439067364, 128.0 / 20037508.3427892439067364)), ATM_CreateTranslate(128.0, -128.0));\" | LD_LIBRARY_PATH=./spatialite_libraries ./spatialite \"$roads\" && rm -rf Roads.geojson && LD_LIBRARY_PATH=./ogr2ogr_libraries ./ogr2ogr Roads.geojson \"$roads\" -f GeoJSON -nlt LINESTRING -explodecollections -lco COORDINATE_PRECISION=3 roads && rm \"$roads\" && webpack --config webpack.config.js --mode production -o FoxholeRouter.js .",
  "debug": "roads=\"$(mktemp).sqlite\"; LD_LIBRARY_PATH=./ogr2ogr_libraries ./ogr2ogr \"$roads\" ./Mapped/Unified.geojson -f SQLite -dsco SPATIALITE=YES -nln roads && LD_LIBRARY_PATH=./ogr2ogr_libraries ./ogr2ogr \"$roads\" ./hexes.geojson -f SQLite -dsco SPATIALITE=YES -nln hexes -append && echo \"alter table roads add column region text; create table temp as select intersection(a.geometry, b.geometry) [geometry], a.rowid [rowid], b.[region] region from [roads] a join [hexes] b on st_intersects(a.geometry, b.geometry) where not intersection(a.geometry, b.geometry) is null; delete from roads; insert into [roads]([geometry], [region]) select [geometry], [region] from temp where not [geometry] is null and st_npoints(geometry)>0; update [roads] set [region]=(select region from [hexes] b where st_contains(b.geometry, roads.geometry) limit 1); update [roads] set [region]=(select region from [hexes] b where st_intersects(b.geometry, roads.geometry) limit 1) where region is null; update [roads] set geometry = ATM_Transform(ATM_Transform(geometry, ATM_CreateScale(128.0 / 20037508.3427892439067364, 128.0 / 20037508.3427892439067364)), ATM_CreateTranslate(128.0, -128.0));\" | LD_LIBRARY_PATH=./spatialite_libraries ./spatialite \"$roads\" && rm -rf Roads.geojson && LD_LIBRARY_PATH=./ogr2ogr_libraries ./ogr2ogr Roads.geojson \"$roads\" -f GeoJSON -nlt LINESTRING -explodecollections -lco COORDINATE_PRECISION=3 roads && rm \"$roads\" && webpack --config webpack.config.js --mode development -o FoxholeRouter.js ."
  
  },
  "author": "Derp",
  "license": "MIT",
  "dependencies": {
    "jquery": "*",
    "json-loader": "^0.5",
    "leaflet": "^1.5",
    "leaflet-routing-machine": "^3.2.12",
    "@turf/distance": "^6.0.1",
    "@turf/explode": "^5.1.0",
    "point-in-polygon": "*",
    "tap": "^12.0.0",
    "tap-spec": "^5.0.0",
    "tinyqueue": "^2.0.0",
    "turf-point": "^2.0.1"
  },
  "devDependencies": {
	  "make": "*",
    "webpack-cli": "^3.3",
    "webpack": "*",
    "jq": "*"
  }
}
